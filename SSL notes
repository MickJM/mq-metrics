
# mq web
https://www.ibm.com/developerworks/community/blogs/messaging/entry/Bitesize_Blogging_MQ_9_0_1_IBM_MQ_Console_Authentication?lang=en

#
# Use mutual authentication
#
queue manager CMS keystore;
   keys alias 
       ibmwebsheremqqmap01 - this has CN=QMAP01 ...
       mqmetrics - (public key from JKS keystore) this has CN=MQExplorerUser ...

Java app keystore / truststore (same files)
	MUTUAL authenrication
	keys
	    ibmwebspheremqqmap01 (public key from CMS keystore)       
		ibmwebspheremqmickm 
	***** SET SSL attribute on channel **** to 'required', label = ibmwebspheremqqmap01
	should get cert details on channel ....
	SERIALNUMBER=2C:C6:8B:20,CN=MQExploreUser,OU=TEST,OU=QMGR,OU=ADMIN,O=DevOps,L=Maidenhead,ST=GB
	CN=MQExploreUser,OU=TEST,OU=QMGR,OU=ADMIN,O=DevOps,L=Maidenhead,ST=GB
	
Java app keystore / truststore (same files)
	ONEWAY authenrication
	keys
	    ibmwebspheremqqmap01 (public key / root from CMS keystore)       
	***** SET SSL attribute on channel **** to 'optional', label = ibmwebspheremqqmap01
	

# create key database ...
# self signed

1) create empty keystore
runmqakm -keydb -create -db key.kdb -pw Passw0rd -stash 

runmqakm -keydb -create -db qmap01key.kdb -pw Passw0rd -stash 
runmqakm -keydb -create -db test.kdb -pw Passw0rd -stash 

2) list certs
runmqakm -cert -list -db key.kdb -stashed
runmqakm -cert -list -db qmap01key.kdb -stashed
runmqakm -cert -list -db tstqpd01key.kdb -stashed
runmqakm -cert -list -db test.kdb -stashed

3a) create csr
runmqckm -certreq -create -label ibmwebspheremqqmap01 -stashed -size 2048 -sig_alg SHA256withRSA -dn "CN=QMAP01,OU=DEV,OU=QMGR,OU=ADMIN,O=DevOps,L=Copenhagen,ST=DK,email=michael.moriarty@maersk.com" -db qmap01key.kdb -file qmap01.csr
runmqakm -certreq -create -label ibmwebspheremqqmap01 -stashed -size 2048 -sig_alg SHA256withRSA -dn "CN=QMAP01,OU=DEV,OU=QMGR,OU=ADMIN,O=DevOps,L=Copenhagen,ST=DK,email=michael.moriarty@maersk.com" -db qmap01key.kdb -file qmap01.csr
runmqakm -certreq -create -label ibmwebspheremqtest -stashed -size 2048 -sig_alg SHA256withRSA -dn "CN=SMQ.DEV.TEST,OU=DEV,OU=QMGR,OU=ADMIN,O=DevOps,L=Copenhagen,ST=DK,email=michael.moriarty@maersk.com" -db test.kdb -file test.csr


3) create cert
runmqakm -cert -create -label ibmwebspheremqaceq01 -stashed -expire 730 -size 2048 -dn "CN=ACEQ01,OU=TEST,OU=QMGR,OU=ADMIN,O=DevOps,L=Copenhagen,ST=DK,email=mick.mozzland@virgin.net" -db key.kdb -ca false

runmqakm -cert -create -label ibmwebspheremq{queue manager name} -stashed -expire 730 -size 2048 -dn "CN={Queue manager name},OU={environment},OU=QMGR,OU=ADMIN,O=DevOps,L=Copenhagen,ST=DK,email={support email@maersk.com}" -db key.kdb -ca false
runmqakm -cert -create -label ibmwebspheremqqmap01 -stashed -expire 730 -size 2048 -dn "CN=QMAP01,OU=DEV,OU=QMGR,OU=ADMIN,O=DevOps,L=Copenhagen,ST=DK,email=michael.moriarty@maersk.com" -db qmap01key.kdb -ca false

4) show cert details  
runmqakm -cert -details -db key.kdb -stashed -label caroot
runmqakm -cert -details -db key.kdb -stashed -label ibmwebspheremq{queue manager name}
runmqakm -cert -details -db key.kdb -stashed -label ibmwebspheremqaceq01
runmqakm -cert -details -db key.kdb -stashed -label ibmwebspheremqqmap01

5) extract cert
runmqakm -cert -extract -db key.kdb -stashed -label ibmwebspheremqaceq01 -target aceq01.arm -format ascii

runmqakm -cert -extract -db key.kdb -stashed -label ibmwebspheremq{queue manager name} -target {queue manager name}.arm -format ascii
runmqakm -cert -extract -db tstqpd01key.kdb -stashed -label ibmwebspheremqtstqpd01 -target tstqpd01.arm -format ascii
runmqakm -cert -extract -db tstqpd01key.kdb -stashed -label MQ_CA -target mq_ca.arm -format ascii

6) create cert for application
keytool -genkey -alias ibmwebspheremq{user} -keyalg RSA -sigalg SHA256withRSA -dname "CN={Application},OU={environment},OU=QMGR,OU=ADMIN,O=DevOps,L=Maidenhead,ST=GB" -keystore {queue manager name}jks.jks -storetype jks -storepass Passw0rd -keypass Passw0rd -validity 365 -keysize 2048

7) list certs
keytool -keystore {queue manager name}jks.jks -storepass Passw0rd -list 
keytool -keystore qmap01jks.jks -storepass Passw0rd -list 

8) export the public key
keytool -export -keystore {queue manager name}jks.jks -storepass Passw0rd -alias ibmwebspheremq{user} -file {queue manager name}jks.arm -rfc

9) Import certs ... into the jks keystore
keytool -import -alias ibmwebspheremq{queue manager} -file {queue manager}.arm -storepass Passw0rd -keystore {queue manager}jks.jks -trustcacert

keytool -import -alias mq_ca -file mq_ca.arm -storepass Passw0rd -keystore tstqpd01jks.jks -trustcacert
keytool -import -alias ibmwebspheremqtstqpd01 -file tstqpd01.arm -storepass Passw0rd -keystore tstqpd01jks.jks -trustcacert


10) list contents of queue managers keystore
runmqakm -cert -list -db key.kdb -stashed

11a) add ca's
runmqakm -cert -add -db qmap01key.kdb -stashed -file CA.cer -trust enable -label caroot
runmqakm -cert -add -db qmap01key.kdb -stashed -file Int.cer -trust enable -label int01


11) add the extracted cert to the queue managers keystore ... only required for mutual authentication 
runmqakm -cert -add -db key.kdb -stashed -file qmap01jks.arm -trust enable -label ibmwebspheremq{user}

12) create TLS channel
define channel(MQ.TLS.SVRCONN) chltype(SVRCONN) trptype(TCP) mcauser('MQMon01') sslcauth(REQUIRED) sslciph(TLS_RSA_WITH_AES_256_CBC_SHA256) sslpeer('CN={application}, OU={environment}') 

13) set channel auths
set chlauth(MQ.TLS.SVRCONN) type(BLOCKUSER) userlist('nobody') 
set chlauth(MQ.TLS.SVRCONN) type(SSLPEERMAP) sslpeer('CN="{Queue manager}", OU="{environment}", OU="QMGR", OU="ADMIN"') mcauser('MQMon01') usersrc(MAP) 

